import json
import os

# Define input and output paths
input_json_path = r"e:\SUMMER_PROJECT_CPP\ML\outputs\fitness_predictions.json"
output_txt_path = r"e:\SUMMER_PROJECT_CPP\ML\outputs\fitness_summary.txt"

# Read the JSON file
try:
    with open(input_json_path, 'r') as file:
        data = json.load(file)
except FileNotFoundError:
    print(f"Error: File {input_json_path} not found.")
    exit(1)
except json.JSONDecodeError:
    print(f"Error: File {input_json_path} is not a valid JSON.")
    exit(1)

# Extract assessments data
assessments = data.get('assessments', {})
if not assessments:
    print("Error: No assessments data found in the JSON file.")
    exit(1)

# Create the output file
with open(output_txt_path, 'w') as file:
    # Write header
    file.write("=" * 50 + "\n")
    file.write("ML Fitness Predictor: User Fitness Summary\n")
    file.write("=" * 50 + "\n\n")
    file.write("Generated on: July 23, 2025\n\n")
    file.write("This report summarizes fitness assessments for 15 users based on predictions\n")
    file.write("from the ML Fitness Predictor, using data from July 3, 2025, to July 17, 2025.\n")
    file.write("The following sections provide fitness scores and personalized recommendations.\n\n")

    # Fitness Scores Section
    file.write("Fitness Scores\n")
    file.write("-" * 50 + "\n")
    file.write("User ID | Fitness Score | Fitness Level\n")
    file.write("-" * 50 + "\n")
    
    # Sort users by ID for consistent output
    for user_id in sorted(assessments.keys(), key=int):
        score = assessments[user_id]['fitness_score']
        level = assessments[user_id]['fitness_level']
        file.write(f"{user_id:<7} | {score:>12.2f} | {level}\n")
    
    file.write("\n")

    # Recommendations Section
    file.write("Personalized Recommendations\n")
    file.write("-" * 50 + "\n")
    
    for user_id in sorted(assessments.keys(), key=int):
        score = assessments[user_id]['fitness_score']
        level = assessments[user_id]['fitness_level']
        recommendations = assessments[user_id]['recommendations']
        
        file.write(f"User {user_id} (Fitness Score: {score:.2f}, {level})\n")
        for rec in recommendations:
            file.write(f"  - {rec}\n")
        file.write("\n")

    # Footer
    file.write("=" * 50 + "\n")
    file.write("End of Report\n")
    file.write("Generated by ML Fitness Predictor\n")
    file.write("=" * 50 + "\n")

print(f"Summary report generated successfully at: {output_txt_path}")