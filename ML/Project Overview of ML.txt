Fitness Predictor Project Overview
================================

Project Description
------------------
The Fitness Predictor is a Python-based system that analyzes fitness data for 15 users, predicts their fitness metrics (steps, calories, sleep hours, water intake) for the next 14 days, and provides personalized fitness assessments and recommendations. It is designed to be modular and beginner-friendly, with outputs saved in a JSON file for easy integration with backends (e.g., C++ or web applications).

Key Features
------------
- Loads and cleans fitness data from a CSV file.
- Uses Linear Regression to predict future fitness metrics for 15 users over 14 days.
- Assesses each user's fitness level (Needs Improvement, Moderate, Fit) based on predicted metrics.
- Generates personalized recommendations to improve fitness (e.g., "Increase daily steps").
- Saves results in a JSON file (`fitness_predictions.json`) for easy backend use.
- Modular structure with separate scripts for data loading, modeling, prediction, and assessment.

Project Structure
----------------
The project consists of the following files:
- `data_loader.py`: Loads and cleans the CSV dataset, preparing it for analysis.
- `predictor.py`: Trains machine learning models and predicts future fitness metrics.
- `fitness_assessor.py`: Evaluates fitness levels and generates recommendations.
- `main.py`: Orchestrates the workflow, combining all modules to produce predictions and assessments.
- `fitness_logs_15users_15days.csv`: Input dataset with fitness data for 15 users over 15 days.

Dependencies
------------
- Python 3.x
- Libraries: pandas, numpy, scikit-learn
  Install with: `pip install pandas numpy scikit-learn`

How to Use
----------
1. **Setup**:
   - Place all Python scripts and `fitness_logs_15users_15days.csv` in the same directory.
   - Ensure dependencies are installed (see above).
2. **Run the Project**:
   - Execute `python main.py` in the terminal.
   - The script will:
     - Load and clean the dataset.
     - Train models for steps, calories, sleep hours, and water intake.
     - Predict metrics for the next 14 days for all users.
     - Assess fitness levels and provide recommendations.
     - Save results to `fitness_predictions.json`.
3. **Output**:
   - A JSON file (`fitness_predictions.json`) containing:
     - Predictions: 14-day forecasts for each metric per user.
     - Assessments: Fitness score, level, and recommendations per user.
   - Console output shows progress and a sample result for User 1.
   - Example JSON structure:
     ```
     {
       "predictions": {
         "1": {
           "steps": [{"day": 15, "value": 8200.45}, ...],
           "calories": [...],
           ...
         },
         ...
       },
       "assessments": {
         "1": {
           "fitness_score": 72.5,
           "fitness_level": "Moderate",
           "recommendations": ["Increase daily steps by walking or light exercise."]
         },
         ...
       }
     }
     ```

Fitness Assessment Logic
-----------------------
- **Metrics Evaluated**: Steps (ideal: ~10,000/day), Calories (ideal: 2,000–2,900 kcal), Sleep Hours (ideal: 7–8 hours), Water Intake (ideal: 2.5–3.5 liters).
- **Fitness Score**: Average of normalized metric scores (0–100 scale).
  - Score < 50: Needs Improvement
  - Score 50–75: Moderate
  - Score > 75: Fit
- **Recommendations**: Based on deviations from ideal ranges (e.g., "Drink more water" if intake < 2.5 liters).

Backend Integration
------------------
The JSON output is designed Tarnished for easy integration with backends:
- **C++**:
  - Use `nlohmann/json` to parse `fitness_predictions.json`.
  - Example:
    ```cpp
    #include <nlohmann/json.hpp>
    #include <fstream>
    using json = nlohmann::json;
    std::ifstream file("fitness_predictions.json");
    json data;
    file >> data;
    for (const auto& user : data["assessments"].items()) {
        std::cout << "User " << user.key() << ": " << user.value()["fitness_level"] << "\n";
    }
    ```
- **Web App**:
  - Use JavaScript to fetch and display results.
  - Example:
    ```javascript
    fetch('fitness_predictions.json')
        .then(response => response.json())
        .then(data => console.log(data.assessments));
    ```
- Suitable for frameworks like Flask, Django, or Node.js.

Extending the Project
--------------------
- **Add Metrics**: Update `main.py` to include new metrics (e.g., heart rate) and train models.
- **Adjust Assessments**: Modify `fitness_assessor.py` to change fitness score criteria or recommendation logic.
- **Visualizations**: Integrate with a GUI (e.g., Qt) to display predictions as charts or show recommendations.

Troubleshooting
---------------
- **File Not Found**: Ensure `fitness_logs_15users_15days.csv` is in the same directory as the scripts.
- **Missing Columns**: Verify the CSV has all required columns (user_id, date, age, gender, height_cm, weight_kg, steps, calories, sleep_hours, water_intake_l, bmi).
- **Library Errors**: Install dependencies using `pip install pandas numpy scikit-learn`.
- Check console output for progress and error messages.

Contact
-------
For support or feature requests, refer to project documentation or contact the development team.

Last Updated: July 20, 2025