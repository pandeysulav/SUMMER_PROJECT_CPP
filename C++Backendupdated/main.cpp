#include <QCoreApplication>      // Base for non-GUI Qt apps (minimal)
#include <QProcess>              // For running external Python scripts
#include <QFile>                 // For reading files
#include <QTextStream>           // For text I/O
#include <QDebug>                // For printing debug messages
#include <QJsonArray>            // For handling JSON arrays
#include <QJsonDocument>         // For reading and writing JSON
#include <QJsonObject>           // For working with JSON objects
#include <QStringList>           // For handling string lists
#include <algorithm>             // For sorting (std::sort)

int main(int argc, char *argv[])
{
    // Start the Qt Core application (no GUI)
    QCoreApplication app(argc, argv);

    // Step 1: Define paths

    // Path to your Python interpreter
    QString pythonExe = "c:/Program Files/Python313/python.exe";

    // Path to your Python script (predictor.py)
    QString scriptPath = "C:/Users/User/OneDrive/Documents/FitnessTrackerBackend/src/predictor.py";

    // Output report file generated by the script
    QString reportPath = "C:/Users/User/OneDrive/Documents/FitnessTrackerBackend/outputs/report.txt";

    // JSON predictions file generated by the script
    QString predictionsJsonPath = "C:/Users/User/OneDrive/Documents/FitnessTrackerBackend/outputs/fitness_predictions.json";

    // Step 2: Run the Python Script

    QProcess pythonProcess;
    pythonProcess.start(pythonExe, QStringList() << scriptPath);
    pythonProcess.waitForFinished(-1);  // Wait until the script finishes

    // Read the script's standard output and errors
    QByteArray pythonOutput = pythonProcess.readAllStandardOutput();
    QByteArray pythonError = pythonProcess.readAllStandardError();

    qDebug() << "Python Output:\n" << pythonOutput;
    if (!pythonError.isEmpty()) {
        qDebug() << "Python Errors:\n" << pythonError;
    }

    // Step 3: Read and Display report.txt

    QFile reportFile(reportPath);
    if (reportFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
        QTextStream in(&reportFile);

        qDebug() << "==================================================";
        qDebug() << "ML Fitness Predictor: User Fitness Summary";
        qDebug() << "==================================================\n";
        qDebug().noquote() << in.readAll();  // Print entire report
        qDebug() << "==================================================";
        qDebug() << "End of Report";
        qDebug() << "Generated by ML Fitness Predictor";
        qDebug() << "==================================================";

        reportFile.close();
    } else {
        qWarning() << "Failed to open report file:" << reportPath;
    }

    // Step 4: Parse fitness_predictions.json

    QFile jsonFile(predictionsJsonPath);
    if (!jsonFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
        qWarning() << "Failed to open JSON predictions file:" << predictionsJsonPath;
        return -1;
    }

    QByteArray jsonData = jsonFile.readAll();
    jsonFile.close();

    QJsonParseError parseError;
    QJsonDocument jsonDoc = QJsonDocument::fromJson(jsonData, &parseError);
    if (parseError.error != QJsonParseError::NoError) {
        qWarning() << "JSON parse error:" << parseError.errorString();
        return -1;
    }

    if (!jsonDoc.isObject()) {
        qWarning() << "JSON root is not an object!";
        return -1;
    }

    QJsonObject predictionsObj = jsonDoc.object();

    // Step 5: Print JSON Data Preview

    QStringList userIdStrings = predictionsObj.keys();
    QList<int> userIdInts;
    for (const QString &uidStr : userIdStrings)
        userIdInts.append(uidStr.toInt());
    std::sort(userIdInts.begin(), userIdInts.end());  // Sort numerically

    qDebug() << "=== Parsed Fitness Predictions Preview ===";

    for (int userIdInt : userIdInts) {
        QString userId = QString::number(userIdInt);
        QJsonObject userPredictions = predictionsObj[userId].toObject();

        qDebug() << "User ID:" << "\"" + userId + "\"";

        for (const QString &metric : userPredictions.keys()) {
            QJsonArray arr = userPredictions[metric].toArray();
            qDebug() << "  Metric:" << "\"" + metric + "\"" << "Predictions count:" << arr.size();

            for (int i = 0; i < arr.size(); ++i) {
                double val = arr[i].toDouble();
                qDebug() << "    Day" << (i + 1) << ":" << val;
            }
        }
    }

    qDebug() << "=== End of JSON Preview ===";

    // Since no GUI window yet, just return after all processing
    return 0;
}
