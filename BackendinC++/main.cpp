#include <QCoreApplication>
#include <QProcess>
#include <QFile>
#include <QTextStream>
#include <QDebug>
#include <QJsonDocument>
#include <QJsonObject>
#include <QJsonArray>
#include <QStringList>
#include <algorithm>

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    // Adjust these paths to your system
    QString pythonExe = "c:/Program Files/Python313/python.exe";
    QString scriptPath = "C:/Users/User/OneDrive/Documents/FitnessTrackerBackend/src/predictor.py";
    QString reportPath = "C:/Users/User/OneDrive/Documents/FitnessTrackerBackend/outputs/report.txt";
    QString predictionsJsonPath = "C:/Users/User/OneDrive/Documents/FitnessTrackerBackend/outputs/fitness_predictions.json";

    // Run Python predictor script
    QProcess pythonProcess;
    pythonProcess.start(pythonExe, QStringList() << scriptPath);
    pythonProcess.waitForFinished(-1);

    QByteArray pythonOutput = pythonProcess.readAllStandardOutput();
    QByteArray pythonError = pythonProcess.readAllStandardError();
    qDebug() << "Python Output:\n" << pythonOutput;
    if (!pythonError.isEmpty()) {
        qDebug() << "Python Errors:\n" << pythonError;
    }

    // Read and print report.txt
    QFile reportFile(reportPath);
    if (reportFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
        QTextStream in(&reportFile);
        qDebug() << "==================================================";
        qDebug() << "ML Fitness Predictor: User Fitness Summary";
        qDebug() << "==================================================\n";
        qDebug().noquote() << in.readAll();
        qDebug() << "==================================================";
        qDebug() << "End of Report";
        qDebug() << "Generated by ML Fitness Predictor";
        qDebug() << "==================================================";
        reportFile.close();
    } else {
        qWarning() << "Failed to open report file:" << reportPath;
    }

    // Load and parse JSON predictions
    QFile jsonFile(predictionsJsonPath);
    if (!jsonFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
        qWarning() << "Failed to open JSON predictions file:" << predictionsJsonPath;
        return -1;
    }
    QByteArray jsonData = jsonFile.readAll();
    jsonFile.close();

    QJsonParseError parseError;
    QJsonDocument jsonDoc = QJsonDocument::fromJson(jsonData, &parseError);
    if (parseError.error != QJsonParseError::NoError) {
        qWarning() << "JSON parse error:" << parseError.errorString();
        return -1;
    }
    if (!jsonDoc.isObject()) {
        qWarning() << "JSON root is not an object!";
        return -1;
    }

    QJsonObject predictionsObj = jsonDoc.object();

    // Sort user IDs numerically
    QStringList userIdStrings = predictionsObj.keys();
    QList<int> userIdInts;
    for (const QString &uidStr : userIdStrings)
        userIdInts.append(uidStr.toInt());
    std::sort(userIdInts.begin(), userIdInts.end());

    qDebug() << "=== Parsed Fitness Predictions Preview ===";

    for (int userIdInt : userIdInts) {
        QString userId = QString::number(userIdInt);
        QJsonObject userPredictions = predictionsObj[userId].toObject();

        qDebug() << "User ID:" << "\"" + userId + "\"";

        for (const QString &metric : userPredictions.keys()) {
            QJsonArray arr = userPredictions[metric].toArray();
            qDebug() << "  Metric:" << "\"" + metric + "\"" << "Predictions count:" << arr.size();

            for (int i = 0; i < arr.size(); ++i) {
                double val = arr[i].toDouble();
                qDebug() << "    Day" << (i+1) << ":" << val;
            }
        }
    }
    qDebug() << "=== End of JSON Preview ===";

    return 0;
}
